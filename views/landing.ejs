<% include partials/header %>
<div class="container page-header">
    <h1>This is a simple Blockchain Algorithm</h1>
    <h3>Info</h3>
    <section>
      This is a public ledger, and anyone can add a block to this blockchain
      as well as anyone can view it
    </section>
    <h3>Getting Started</h3>
    <section>
    <h4>Add a new block</h4>
      <section>
        Try it yourself! Go to <a href="/new">here</a> and add your own block.
        Fill the required data and click <strong>calculate valid hash</strong> which is the proof
        of work that you did to build a block.
      </section>
    <h4>Check blockchain validity</h4>
      <section>
        Try and edit any of the public blocks, then click on <strong>Revalidate</strong>.
        The validator banner should turn <span style='color:red'>red</span> if it was
        an invalid chain.
      </section>
      <section>
        Try and edit the very first block, Block 0, and see the effect after validation.
      </section>
    </section>
    <br />
    <p>
      Made by <a href="https://github.com/atalhassan">Abdullah Alhassan</a>
    </p>
    <p>
       <a href="https://github.com/atalhassan/blockchain">Source Code</a>
    </p>
</div>
<div class="container" >

  <%if(valid){%>
    <div id='valid' class="alert alert-success" role="alert">
      <span>This is a valid blockchain</span>
    </div>
  <%} else {%>
    <div id='valid'  class="alert alert-danger" role="alert">
      This is NOT a valid blockchain
    </div>
  <%}%>
  <button class='btn btn-lg btn-primary' id="validator">Revalidated</button>


  <% var chain = blockchain.chain.slice()%>
  <% chain.reverse()%>
  <% chain.forEach(function(block){ %>
    <div id=<%=block.index%> class="container block" >
      <h3 class"label"> Block: <span> <%=block.index %></span> </h1>
      <h5 class"label"> Time Created: <span contenteditable="false"><%=  moment(parseInt(block.timestamp)) %> </span></h5>
      <h5 class"label"> Nonce:  <input  name='salt'  class='form-control' contenteditable="true" value="<%=block.salt %>" /></h5>
      <h5 class"label"> Details:  </h5>
      <ul>
        <li> From:<input name='data.from' class='form-control' contenteditable="true" value='<%= block.data.from %>'/> </li>
        <li> To: <input name='data.to' class='form-control' contenteditable="true" value='<%= block.data.to %>'/> </li>
        <li> Message:<input name='data.message'  class='form-control' contenteditable="true" value='<%= block.data.message %>'/> </li>
      </ul>
      <h5 class"label"> Previous Hash: <input name='prevHash' class='form-control' contenteditable="true" value='<%= block.prevHash %>'/> </h5>
      <h5 class"label"> Hash: <input name='hash' class='form-control' contenteditable="true" value='<%= block.hash %>'/> </h5>

    </div>
  <% }); %>


</div>

<script>

let blockchain;

window.onload = (function() {
  blockchain = <%-JSON.stringify(blockchain)%>
})

$( "input" ).change(function() {
  const index = $(this).closest('div').attr('id')
  const newValue = $(this).val()
  changeByid(blockchain, index, newValue, $(this).attr('name'))
  $('body').animate({
    color: "green",
    backgroundColor: "rgb( 20, 20, 20 )"
  });
  // validator()
  // $('body').css('background', 'rgb(242,222,222)')

})

$('#validator').click(function () {
  validator()

})

function validator() {
  $('#valid').show()
  $('#invalid').hide()
  if (isValid(blockchain)) {
    $('#valid').addClass('alert-success')
    $('#valid').removeClass('alert-danger')
    $('#valid').children('span').text('This is a valid blockchain')
  } else {
    $('#valid').removeClass('alert-success')
    $('#valid').addClass('alert-danger')
    $('#valid').children('span').text('This is NOT a valid blockchain')
  }
}

function changeByid(blockchain, index, newValue, item) {
  const path = item.split('.')
  if (path.length === 1) {
    blockchain.chain[index][path[0]] = newValue
  } else {
    blockchain.chain[index][path[0]][path[1]] = newValue
  }
}

function isValid(blockchain){
  if (blockchain.chain.length === 0) {
    return true
  }
  var currBlock = new Block(blockchain.chain[0].index, blockchain.chain[0].timestamp, blockchain.chain[0].data, blockchain.chain[0].prevHash, blockchain.chain[0].hash, blockchain.chain[0].salt);
  if(currBlock.hash !== currBlock.calculateHash()){
    return false;
  }
  console.log(currBlock.description());

  for (var i = 1; i < blockchain.chain.length; i++) {

    var currBlock = new Block(blockchain.chain[i].index, blockchain.chain[i].timestamp, blockchain.chain[i].data, blockchain.chain[i].prevHash, blockchain.chain[i].hash, blockchain.chain[i].salt);
    var prevBlock = new Block(blockchain.chain[i-1].index, blockchain.chain[i-1].timestamp, blockchain.chain[i-1].data, blockchain.chain[i-1].prevHash, blockchain.chain[i-1].hash, blockchain.chain[i-1].salt);
    //case 1 check if currBlock is valid
    if(currBlock.hash !== currBlock.calculateHash()){
      return false;
    }

    //case 2 check if currBlock is linked correctly
    if (currBlock.prevHash !== prevBlock.hash) {
      return false;
    }
  }
  return true;
}

</script>


<% include partials/footer %>
